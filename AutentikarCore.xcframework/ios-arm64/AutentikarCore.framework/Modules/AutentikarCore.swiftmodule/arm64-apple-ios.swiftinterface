// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AutentikarCore
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import AutentikarCore
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AutentikarError<T> : Swift.Error {
  public let type: T
  public init(type: T)
}
@objc @_inheritsConvenienceInitializers public class AutentikarCEManager : ObjectiveC.NSObject {
  @objc deinit
  #if compiler(>=5.3) && $NonescapableTypes
  public func getMethod(step: AutentikarCore.AutentikarStepType, method: AutentikarCore.AutentikarMethodType, request: Foundation.Data?, success: @escaping (AutentikarCore.NetworkResponse) -> Swift.Void, failure: @escaping (AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>) -> Swift.Void)
  #endif
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class AutentikarManager : ObjectiveC.NSObject {
  @objc deinit
  public typealias AutentikarStepProtocol = AutentikarCore.AutentikarStepRouterProtocol
  @objc public static let shared: AutentikarCore.AutentikarManager
  @objc public func setCustomization(_ customization: AutentikarCore.AutentikarCoreCustomization)
  @objc public func start(_ viewController: UIKit.UIViewController, with code: Swift.String, onError: @escaping () -> Swift.Void)
  @objc public func register(for step: any AutentikarCore.AutentikarStepRouterProtocol)
  @objc override dynamic public init()
}
public enum AutentikarActionType : AutentikarCore.AutentikarTypeProtocol {
  case userCancel
  case userDisagree
  case appCancel
  public static func == (a: AutentikarCore.AutentikarActionType, b: AutentikarCore.AutentikarActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AutentikarErrorType : AutentikarCore.AutentikarTypeProtocol, Swift.Equatable {
  case noInternetConnection
  case server(_: Swift.String)
  case custom(_: Swift.String)
  case message(_: Swift.String)
  case general
  case noValidUrl
  case noNextStepDefinition
  public static func == (a: AutentikarCore.AutentikarErrorType, b: AutentikarCore.AutentikarErrorType) -> Swift.Bool
}
extension AutentikarCore.AutentikarErrorType {
  public var localizedDescription: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
}
public enum AutentikarInstructionsType {
  case idCard
  case livenessCheck
  public static func == (a: AutentikarCore.AutentikarInstructionsType, b: AutentikarCore.AutentikarInstructionsType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AutentikarMethodType : Swift.Int, Swift.RawRepresentable {
  case params
  case token
  case scan
  case capture
  case process
  case front
  case back
  public typealias RawValue = Swift.String
  public var rawValue: AutentikarCore.AutentikarMethodType.RawValue {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
}
@objc public enum AutentikarStageType : Swift.Int {
  case sandbox
  case production
  case qa
  public typealias RawValue = Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum AutentikarStepType : Swift.Int, Swift.RawRepresentable {
  case documentCapture
  case cardCapture
  case confirm
  case faceTecCardID
  case fileViewer
  case result
  case faceTecLiveness
  case faceFaceTec
  case selfie
  public typealias RawValue = Swift.String
  public var rawValue: AutentikarCore.AutentikarStepType.RawValue {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
}





@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AutentikarExtensionViewController : AutentikarCore.AutentikarViewController {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency override open func error(_ with: AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>)
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AutentikarCore.AutentikarExtensionDelegate)?
}
public protocol AutentikarExtensionDelegate : AnyObject {
  #if compiler(>=5.3) && $NonescapableTypes
  func success(_ child: UIKit.UIViewController, with response: Swift.String?)
  #endif
  func failure<T>(_ child: UIKit.UIViewController, with error: AutentikarCore.AutentikarError<T>) where T : AutentikarCore.AutentikarTypeProtocol
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class AutentikarViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency open var presenter: AutentikarCore.BaseViewModel?
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, unavailable, message: "init(coder:) has not been implemented")
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func defaultError(_ error: AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func error(_ with: AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>)
}
open class BaseViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) open var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  open var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var btnError: Combine.PassthroughSubject<AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>?, Swift.Never>
  @Combine.Published @_projectedValueProperty($isSomeViewPresented) public var isSomeViewPresented: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isSomeViewPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc deinit
  public init()
  open func defaultError(_ error: AutentikarCore.AutentikarError<AutentikarCore.AutentikarErrorType>)
  public func changeText(_ text: Swift.String)
  public func clearError()
  public func presentSheet<Content>(@SwiftUICore.ViewBuilder content: () -> Content) where Content : SwiftUICore.View
  public func dismissSheet()
  public func instructionsView(instructionType: AutentikarCore.AutentikarInstructionsType, onAgree: @escaping () -> Swift.Void, onDismiss: @escaping () -> Swift.Void) -> SwiftUICore.AnyView
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@_inheritsConvenienceInitializers @objc public class AutentikarConfiguration : ObjectiveC.NSObject {
  @objc deinit
  public static var shared: AutentikarCore.AutentikarConfiguration
  @objc override dynamic public init()
  @objc public var info: Swift.Bool
  @objc public var bundle: Foundation.Bundle {
    @objc get
    @objc set
  }
  @objc public var timeout: Swift.Double
  @objc public var stage: AutentikarCore.AutentikarStageType
  @objc public var alias: Swift.String
  @objc public var url: Swift.String?
}
public struct NetworkResponse {
  public let data: Foundation.Data
  public let statusCode: Swift.Int
}
public enum AutentikarCERouter {
  public static func setup() -> AutentikarCore.AutentikarCEManager
}
@_inheritsConvenienceInitializers @objc public class AutentikarCoreCustomization : ObjectiveC.NSObject {
  @objc deinit
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var animationColor: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc public var text: AutentikarCore.AutentikarCoreCustomization.Text {
    @objc get
    @objc set
  }
  @objc public var footerText: AutentikarCore.AutentikarCoreCustomization.FooterText {
    @objc get
    @objc set
  }
  @objc public var logoName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var showLogo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var instructions: AutentikarCore.AutentikarCoreCustomization.Instructions {
    @objc get
    @objc set
  }
  @objc public var title: AutentikarCore.AutentikarCoreCustomization.Title {
    @objc get
    @objc set
  }
  @objc public var button: AutentikarCore.AutentikarCoreCustomization.Button {
    @objc get
    @objc set
  }
  @objc public var confirm: AutentikarCore.AutentikarCoreCustomization.Confirm {
    @objc get
    @objc set
  }
  @_inheritsConvenienceInitializers @objc public class Confirm : ObjectiveC.NSObject {
    @objc deinit
    @objc public var toggleColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var linkTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class Button : ObjectiveC.NSObject {
    @objc deinit
    @objc public var font: UIKit.UIFont {
      @objc get
      @objc set
    }
    @objc public var activeTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var activeColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disableTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disabledColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var outlineColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @objc public var caption: AutentikarCore.AutentikarCoreCustomization.Caption {
    @objc get
    @objc set
  }
  @_inheritsConvenienceInitializers @objc public class Instructions : ObjectiveC.NSObject {
    @objc deinit
    @objc public var iconColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var closeIconColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class Title : ObjectiveC.NSObject {
    @objc deinit
    @objc public var font: UIKit.UIFont {
      @objc get
      @objc set
    }
    @objc public var color: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class Caption : ObjectiveC.NSObject {
    @objc deinit
    @objc public var font: UIKit.UIFont {
      @objc get
      @objc set
    }
    @objc public var color: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class Text : ObjectiveC.NSObject {
    @objc deinit
    @objc public var font: UIKit.UIFont {
      @objc get
      @objc set
    }
    @objc public var color: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class FooterText : ObjectiveC.NSObject {
    @objc deinit
    @objc public var font: UIKit.UIFont {
      @objc get
      @objc set
    }
    @objc public var color: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var securityFooterTexts: [Swift.String] {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
  }
  @objc override dynamic public init()
}
@objc public protocol AutentikarStepRouterProtocol {
  @objc var step: AutentikarCore.AutentikarStepType { get set }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc func createModule(parent vc: AutentikarCore.AutentikarViewController) -> AutentikarCore.AutentikarExtensionViewController?
  #endif
}
public protocol AutentikarTypeProtocol {
}
@objc public protocol AutentikarCoreDelegate {
  @objc func success()
  @objc func failed()
}
extension AutentikarCore.AutentikarActionType : Swift.Equatable {}
extension AutentikarCore.AutentikarActionType : Swift.Hashable {}
extension AutentikarCore.AutentikarInstructionsType : Swift.Equatable {}
extension AutentikarCore.AutentikarInstructionsType : Swift.Hashable {}
extension AutentikarCore.AutentikarMethodType : Swift.Equatable {}
extension AutentikarCore.AutentikarMethodType : Swift.Hashable {}
extension AutentikarCore.AutentikarStageType : Swift.Equatable {}
extension AutentikarCore.AutentikarStageType : Swift.Hashable {}
extension AutentikarCore.AutentikarStageType : Swift.RawRepresentable {}
extension AutentikarCore.AutentikarStepType : Swift.Equatable {}
extension AutentikarCore.AutentikarStepType : Swift.Hashable {}
